{
  "name": "Transfer",
  "props": {
    "disabled": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Disable the shuttle box",
      "description_zh": "禁用穿梭框"
    },
    "draggable": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "description": "Whether the entries in the list can be dragged and dropped",
      "description_zh": "列表内条目是否可拖拽"
    },
    "className": {
      "default": "-",
      "value": "",
      "type": "string | string[]",
      "description": "Node class name",
      "description_zh": "节点类名"
    },
    ":dataSource": {
      "default": "-",
      "value": "",
      "type": "TransferItem[]",
      "description": "The shuttle box data source, a portion of which will be rendered to the left column, unless specified in the targetKeys",
      "description_zh": "穿梭框数据源，其中一部分会被渲染到左边一栏，targetKeys 中指定的除外",
      "required": true
    },
    ":defaultSelectedKeys": {
      "default": "[]",
      "value": "",
      "type": "string[]",
      "description": "The default selectKeys",
      "description_zh": "默认的 selectKeys"
    },
    ":defaultTargetKeys": {
      "default": "[]",
      "value": "",
      "type": "string[]",
      "description": "Default targetKeys",
      "description_zh": "默认的 targetKeys"
    },
    ":listStyle": {
      "default": "-",
      "value": "",
      "type": "CSSProperties | CSSProperties[]",
      "description": "The style of the left and right columns is passed into an array for the left and right lists",
      "description_zh": "左右两栏框的样式，通过数组为左右列表传入不同属性"
    },
    ":operationStyle": {
      "default": "-",
      "value": "",
      "type": "CSSProperties",
      "description": "The style of the shuttle intermediate operation section",
      "description_zh": "穿梭中间操作部分的样式"
    },
    ":operationTexts": {
      "default": "-",
      "value": "",
      "type": "string[] | ReactNode[]",
      "description": "An array of copywriting for shuttle buttons, in order from top to bottom",
      "description_zh": "穿梭按钮的文案数组，顺序从上至下"
    },
    ":pagination": {
      "default": "-",
      "value": "",
      "type": "boolean | PaginationProps | Array<boolean | PaginationProps>",
      "description": "Whether or not to use page turning, you can also pass in the configuration of Pagination, and pass different properties to the left and right lists through arrays",
      "description_zh": "是否使用翻页，也可传入 Pagination 的配置，通过数组为左右列表传入不同属性"
    },
    "searchPlaceholder": {
      "default": "-",
      "value": "",
      "type": "string | string[]",
      "description": "The search box prompts text by default, and passes different properties to the left and right lists through an array",
      "description_zh": "搜索框默认提示文字，通过数组为左右列表传入不同属性"
    },
    ":selectedKeys": {
      "default": "-",
      "value": "",
      "type": "string[]",
      "description": "What items should currently be selected",
      "description_zh": "当前应该有哪些项被选中"
    },
    ":showFooter": {
      "default": "-",
      "value": "",
      "type": "boolean | ReactNode | Array<boolean | ReactNode>",
      "description": "Whether the left and right columns display the bottom reset button, pass different properties to the left and right lists through the array",
      "description_zh": "左右两栏是否显示底部重置按钮，通过数组为左右列表传入不同属性"
    },
    ":showSearch": {
      "default": "-",
      "value": "",
      "type": "boolean | InputProps | Array<boolean | InputProps>",
      "description": "Whether the search box is displayed in the left and right columns, and different properties are passed into the left and right lists through arrays",
      "description_zh": "左右两栏是否显示搜索框，通过数组为左右列表传入不同属性"
    },
    "simple": {
      "default": "-",
      "value": "",
      "type": "| boolean| {retainSelectedItems?: boolean;}",
      "description": "Simple mode",
      "description_zh": "简单模式"
    },
    ":style": {
      "default": "-",
      "value": "",
      "type": "CSSProperties",
      "description": "Node style",
      "description_zh": "节点样式"
    },
    ":targetKeys": {
      "default": "-",
      "value": "",
      "type": "string[]",
      "description": "A collection of keys rendered to the data in the right column",
      "description_zh": "渲染到右边一栏数据的 key 集合"
    },
    ":titleTexts": {
      "default": "['Source', 'Target']",
      "value": "",
      "type": "Array<TransferListTitle>",
      "description": "Shuttle box left and right column header arrays. (Function writing is supported from 2.18.0)",
      "description_zh": "穿梭框左右栏标题数组。(函数写法 2.18.0 开始支持)"
    },
    ":virtualListProps": {
      "default": "-",
      "value": "",
      "type": "AvailableVirtualListProps",
      "description": "Pass the virtual scroll property.",
      "description_zh": "传递虚拟滚动属性。"
    },
    ":children": {
      "default": "-",
      "value": "",
      "type": "(props: TransferCustomListProps) => ReactNode",
      "description": "Custom list rendering functions",
      "description_zh": "自定义列表渲染函数"
    },
    ":filterOption": {
      "default": "(inputValue, item) => item.value.indexOf(inputValue) !== -1",
      "value": "",
      "type": "(inputValue: string, item: TransferItem) => boolean",
      "description": "Search box filtering algorithm",
      "description_zh": "搜索框筛选算法"
    },
    ":render": {
      "default": "-",
      "value": "",
      "type": "(item: TransferItem) => any",
      "description": "Render function for each row of data",
      "description_zh": "每行数据渲染函数"
    }
  },
  "methods": [],
  "link": "https://arco.design/react/components/transfer#api",
  "link_zh": "https://arco.design/react/components/transfer#api",
  "events": [
    {
      "name": "oneWay",
      "description": "unidirectional",
      "description_zh": "单向",
      "params": "boolean",
      "value": ""
    },
    {
      "name": "onChange",
      "description": "Callback when the selected item is transferred between two columns",
      "description_zh": "选中项在两栏之间转移时的回调",
      "params": "(newTargetKeys: string[], direction: 'source' | 'target', moveKeys: string[]) => void",
      "value": ""
    },
    {
      "name": "onSearch",
      "description": "Enter the callback function for the search box when the search is performed",
      "description_zh": "搜索框输入进行搜索时回调函数",
      "params": "(value: string, type?: 'source' | 'target') => void",
      "value": ""
    },
    {
      "name": "onDragEnd",
      "description": "The callback at the end of the node",
      "description_zh": "节点结束拖拽的回调",
      "params": "(e: DragEvent<HTMLSpanElement>, item: TransferItem) => void",
      "value": ""
    },
    {
      "name": "onDragLeave",
      "description": "A callback when a node leaves a freeable target",
      "description_zh": "节点离开可释放目标上时的回调",
      "params": "(e: DragEvent<HTMLSpanElement>, item: TransferItem) => void",
      "value": ""
    },
    {
      "name": "onDragOver",
      "description": "A callback when a node is dragged onto a disposable target",
      "description_zh": "节点被拖拽至可释放目标上时的回调",
      "params": "(e: DragEvent<HTMLSpanElement>, item: TransferItem) => void",
      "value": ""
    },
    {
      "name": "onDragStart",
      "description": "node starts dragging callbacks",
      "description_zh": "节点开始拖拽的回调",
      "params": "(e: DragEvent<HTMLSpanElement>, item: TransferItem) => void",
      "value": ""
    },
    {
      "name": "onDrop",
      "description": "The callback when a node is released on a disposable target",
      "description_zh": "节点在可释放目标上释放时的回调",
      "params": "(info: {e: DragEvent<HTMLSpanElement>;dragItem: TransferItem;dropItem: TransferItem;dropPosition: number;}) => void",
      "value": ""
    },
    {
      "name": "onResetData",
      "description": "Callback after clicking the reset button",
      "description_zh": "点击重置按钮后的回调",
      "params": "() => void",
      "value": ""
    },
    {
      "name": "onSelectChange",
      "description": "A callback in which the selected status of a data item changes",
      "description_zh": "数据项选中状态发生改变的回调",
      "params": "(leftSelectedKeys: string[], rightSelectedKeys: string[]) => void",
      "value": ""
    }
  ],
  "suggestions": ["Transfer.Item"],
  "typeDetail": {}
}
