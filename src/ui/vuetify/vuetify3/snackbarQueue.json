{
  "name": "VSnackbarQueue",
  "props": {
    "absolute": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Applies position: absolute to the content element.",
      "description_zh": "将 position： absolute 应用于 content 元素。",
      "required": false
    },
    "activator": {
      "default": "undefined",
      "value": "",
      "type": "Element | 'parent' | (string & {}) | ComponentPublicInstance",
      "version": "",
      "description": "Explicitly sets the overlay’s activator.",
      "description_zh": "显式设置叠加层的激活器。",
      "required": false
    },
    "activator-props": {
      "default": "{}",
      "value": "",
      "type": "unknown",
      "version": "",
      "description": "Apply custom properties to the activator.",
      "description_zh": "将自定义属性应用于激活器。",
      "required": false
    },
    "attach": {
      "default": "false",
      "value": "",
      "type": "string | boolean | Element",
      "version": "",
      "description": "Specifies which DOM element the overlay content should teleport to. Can be a direct element reference, querySelector string, or true to disable teleporting. Uses body by default.",
      "description_zh": "指定覆盖内容应传送到哪个 DOM 元素。可以是直接元素引用、querySelector 字符串或 true，以禁用传送。默认使用 body。",
      "required": false
    },
    "closable": {
      "default": "false",
      "value": "",
      "type": "string | boolean",
      "version": "",
      "description": "Adds a dismiss button that closes the active snackbar.",
      "description_zh": "添加一个关闭按钮，用于关闭活动信息提示控件。",
      "required": false
    },
    "close-delay": {
      "default": "undefined",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "Milliseconds to wait before closing component. Only applies to hover and focus events.",
      "description_zh": "关闭组件之前等待的毫秒数。仅适用于悬停和焦点事件。",
      "required": false
    },
    "close-on-back": {
      "default": "true",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Closes the overlay content when the browser’s back button is pressed or $router.back() is called, cancelling the original navigation. persistent overlays will cancel navigation and animate as if they were clicked outside instead of closing.",
      "description_zh": "在按下浏览器的后退按钮或调用 $router.back（） 时关闭覆盖内容，从而取消原始导航。永久叠加将取消导航并制作动画，就像在外部单击而不是关闭一样。",
      "required": false
    },
    "close-on-content-click": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Closes component when you click on its content.",
      "description_zh": "单击组件内容时关闭组件。",
      "required": false
    },
    "close-text": {
      "default": "'$vuetify.dismiss'",
      "value": "",
      "type": "string",
      "version": "",
      "description": "The text used in the close button when using the closable prop.",
      "description_zh": "使用 closable 属性时 close 按钮中使用的文本。",
      "required": false
    },
    "color": {
      "default": "undefined",
      "value": "",
      "type": "string",
      "version": "",
      "description": "Applies specified color to the control - supports utility colors (for example success or purple) or css color (#033 or rgba(255, 0, 0, 0.5)). Find a list of built-in classes on the colors page.",
      "description_zh": "将指定的颜色应用于控件 - 支持实用工具颜色（例如 success 或紫色）或 css 颜色（#033 或 rgba（255， 0， 0， 0.5））。在 colors 页面上查找内置类的列表。",
      "required": false
    },
    "contained": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Limits the size of the component and scrim to its offset parent. Implies absolute and attach. (Note: The parent element must have position: relative.).",
      "description_zh": "将零部件和纱布的大小限制为其偏移父级。暗示 absolute 和 attach。（注意：父元素必须具有 position： relative。",
      "required": false
    },
    "content-class": {
      "default": "undefined",
      "value": "",
      "type": "any",
      "version": "",
      "description": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the v-app component (unless the attach prop is provided) and is not targetable by classes passed directly on the component.",
      "description_zh": "将自定义类应用于分离的元素。这很有用，因为内容被移动到 v-app 组件的开头（除非提供了 attach 属性），并且不能被直接在组件上传递的类所定位。",
      "required": false
    },
    "content-props": {
      "default": "undefined",
      "value": "",
      "type": "any",
      "version": "",
      "description": "Apply custom properties to the content.",
      "description_zh": "将自定义属性应用于内容。",
      "required": false
    },
    "disabled": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Removes the ability to click or target the component.",
      "description_zh": "删除单击组件或定位组件的功能。",
      "required": false
    },
    "eager": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Forces the component’s content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO.",
      "description_zh": "强制组件的内容在挂载时呈现。如果您的内容不会在 DOM 中呈现，并且您希望为 SEO 抓取，这将非常有用。",
      "required": false
    },
    "height": {
      "default": "undefined",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "Sets the height for the component.",
      "description_zh": "设置组件的高度。",
      "required": false
    },
    "location": {
      "default": "'bottom'",
      "value": "",
      "type": "Anchor",
      "version": "",
      "description": "Specifies the anchor point for positioning the component, using directional cues to align it either horizontally, vertically, or both…",
      "description_zh": "指定用于定位组件的锚点，使用方向提示将其水平对齐、垂直对齐或两者对齐......",
      "required": false
    },
    "location-strategy": {
      "default": "'static'",
      "value": "",
      "type": "static / connected / LocationStrategyFn",
      "version": "",
      "description": "A function used to specifies how the component should position relative to its activator.",
      "description_zh": "用于指定组件相对于其激活器的位置的函数。",
      "required": false
    },
    "max-height": {
      "default": "undefined",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "Sets the maximum height for the component.",
      "description_zh": "设置组件的最大高度。",
      "required": false
    },
    "max-width": {
      "default": "undefined",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "Sets the maximum width for the component.",
      "description_zh": "设置组件的最大宽度。",
      "required": false
    },
    "min-height": {
      "default": "undefined",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "Sets the minimum height for the component.",
      "description_zh": "设置组件的最小高度。",
      "required": false
    },
    "min-width": {
      "default": "undefined",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "Sets the minimum width for the component.",
      "description_zh": "设置组件的最小宽度。",
      "required": false
    },
    "v-model": {
      "default": "[]",
      "value": "",
      "type": "(  | string  | {      text: string      multiLine: boolean      timer: string | boolean      timeout: string | number      vertical: boolean      location: Anchor      position: 'static' | 'relative' | 'fixed' | 'absolute' | 'sticky'      absolute: boolean      rounded: string | number | boolean      tile: boolean      color: string      variant: 'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'      theme: string      closeOnBack: boolean      contained: boolean      contentClass: any      contentProps: any      disabled: boolean      opacity: string | number      zIndex: string | number      target:        | Element        | 'parent'        | 'cursor'        | (string & {})        | ComponentPublicInstance        | [number, number]      closeOnContentClick: boolean      style: StyleValue      class: any      height: string | number      maxHeight: string | number      maxWidth: string | number      minHeight: string | number      minWidth: string | number      width: string | number      eager: boolean      locationStrategy: 'static' | 'connected' | LocationStrategyFn      origin: Anchor | 'auto' | 'overlap'      offset: string | number | number[]      transition:        | string        | boolean        | (TransitionProps & { component: Component })      attach: string | boolean | Element      'v-slots': {        activator:          | false          | ((arg: {              isActive: boolean              props: Record<string, any>            }) => VNodeChild)        default: false | (() => VNodeChild)        actions: false | ((arg: { isActive: Ref<boolean> }) => VNodeChild)        text: false | (() => VNodeChild)      }      'v-slot:default': false | (() => VNodeChild)      'v-slot:activator':        | false        | ((arg: {            isActive: boolean            props: Record<string, any>          }) => VNodeChild)      key: string | number | symbol      ref: VNodeRef      ref_for: boolean      ref_key: string      onVnodeBeforeMount: VNodeMountHook | VNodeMountHook[]      onVnodeMounted: VNodeMountHook | VNodeMountHook[]      onVnodeBeforeUpdate: VNodeUpdateHook | VNodeUpdateHook[]      onVnodeUpdated: VNodeUpdateHook | VNodeUpdateHook[]      onVnodeBeforeUnmount: VNodeMountHook | VNodeMountHook[]      onVnodeUnmounted: VNodeMountHook | VNodeMountHook[]      'v-slot:actions':        | false        | ((arg: { isActive: Ref<boolean> }) => VNodeChild)      'v-slot:text': false | (() => VNodeChild)    })[]",
      "version": "",
      "description": "The v-model value of the component. If component supports the multiple prop, this defaults to an empty array.",
      "description_zh": "组件的 v-model 值。如果 component 支持 multiple prop，则默认为空数组。",
      "required": false
    },
    "multi-line": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Gives the snackbar a larger minimum height.",
      "description_zh": "为信息提示控件提供更大的最小高度。",
      "required": false
    },
    "offset": {
      "default": "undefined",
      "value": "",
      "type": "string | number | number[]",
      "version": "",
      "description": "A single value that offsets content away from the target based upon what side it is on.",
      "description_zh": "一个值，该值根据内容所在的一侧将内容从目标偏移。",
      "required": false
    },
    "opacity": {
      "default": "undefined",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "Sets the overlay opacity.",
      "description_zh": "设置叠加不透明度。",
      "required": false
    },
    "open-delay": {
      "default": "undefined",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "Milliseconds to wait before opening component. Only applies to hover and focus events.",
      "description_zh": "打开组件之前等待的毫秒数。仅适用于悬停和焦点事件。",
      "required": false
    },
    "open-on-click": {
      "default": "undefined",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Activate the component when the activator is clicked.",
      "description_zh": "单击激活器时激活组件。",
      "required": false
    },
    "open-on-focus": {
      "default": "undefined",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Activate the component when the activator is focused.",
      "description_zh": "当激活器聚焦时激活组件。",
      "required": false
    },
    "open-on-hover": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Activate the component when the activator is hovered.",
      "description_zh": "将鼠标悬停在激活器上时激活组件。",
      "required": false
    },
    "origin": {
      "default": "'auto'",
      "value": "",
      "type": "Anchor / auto / overlap",
      "version": "",
      "description": "Sets the transition origin on the element. You can find more information on the MDN documentation for transition origin.",
      "description_zh": "设置元素上的过渡原点。您可以在 transition origin 的 MDN 文档上找到更多信息。",
      "required": false
    },
    "position": {
      "default": "undefined",
      "value": "",
      "type": "static / relative / fixed / absolute / sticky",
      "version": "",
      "description": "Sets the position for the component.",
      "description_zh": "设置零部件的位置。",
      "required": false
    },
    "rounded": {
      "default": "undefined",
      "value": "",
      "type": "string | number | boolean",
      "version": "",
      "description": "Designates the border-radius applied to the component. This can be 0, xs, sm, true, lg, xl, pill, circle, and shaped. Find more information on available border radius classes on the Border Radius page.",
      "description_zh": "指定应用于组件的 border-radius。这可以是 0、xs、sm、true、lg、xl、pill、circle 和 shaped。在 Border Radius 页面上查找有关可用边界半径类的更多信息。",
      "required": false
    },
    "target": {
      "default": "undefined",
      "value": "",
      "type": "  | Element  | 'parent'  | 'cursor'  | (string & {})  | ComponentPublicInstance  | [number, number]",
      "version": "",
      "description": "For locationStrategy=“connected”, specify an element or array of x,y coordinates that the overlay should position itself relative to. This will be the activator element by default.",
      "description_zh": "对于 locationStrategy=“connected”，指定叠加层应相对于其定位自身的 x，y 坐标的元素或数组。默认情况下，这将是 activator 元素。",
      "required": false
    },
    "text": {
      "default": "undefined",
      "value": "",
      "type": "string",
      "version": "",
      "description": "Specify content text for the component.",
      "description_zh": "指定组件的内容文本。",
      "required": false
    },
    "theme": {
      "default": "undefined",
      "value": "",
      "type": "string",
      "version": "",
      "description": "Specify a theme for this component and all of its children.",
      "description_zh": "为此组件及其所有子组件指定主题。",
      "required": false
    },
    "tile": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Removes any applied border-radius from the component.",
      "description_zh": "从组件中删除任何应用的 border-radius。",
      "required": false
    },
    "timeout": {
      "default": "5000",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "Time (in milliseconds) to wait until snackbar is automatically hidden. Use -1 to keep open indefinitely (0 in version < 2.3 ). It is recommended for this number to be between 4000 and 10000. Changes to this property will reset the timeout.",
      "description_zh": "等待信息提示控件自动隐藏之前的时间 （毫秒）。使用 -1 可无限期保持打开状态（在版本 < 2.3 中为 0 ）。建议此数字介于 4000 和 10000 之间。更改此属性将重置超时。",
      "required": false
    },
    "timer": {
      "default": "false",
      "value": "",
      "type": "string | boolean",
      "version": "",
      "description": "Display a progress bar that counts down until the snackbar closes. Pass a string to set a custom color, otherwise uses info.",
      "description_zh": "显示一个进度条，该进度条会倒计时，直到信息提示控件关闭。传递一个字符串来设置自定义颜色，否则使用 info。",
      "required": false
    },
    "transition": {
      "default": "'v-snackbar-transition'",
      "value": "",
      "type": "string | boolean | (TransitionProps & { component: Component })",
      "version": "",
      "description": "Sets the component transition. Can be one of the built in or custom transition.",
      "description_zh": "设置零部件过渡。可以是内置或自定义过渡之一。",
      "required": false
    },
    "variant": {
      "default": "'elevated'",
      "value": "",
      "type": "text / flat / elevated / tonal / outlined / plain",
      "version": "",
      "description": "Applies a distinct style to the component.",
      "description_zh": "将不同的样式应用于组件。",
      "required": false
    },
    "vertical": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Stacks snackbar content on top of the actions (button).",
      "description_zh": "将信息提示控件内容堆叠在操作（按钮）的顶部。",
      "required": false
    },
    "width": {
      "default": "undefined",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "Sets the width for the component.",
      "description_zh": "设置组件的宽度。",
      "required": false
    },
    "z-index": {
      "default": "2000",
      "value": "",
      "type": "string | number",
      "version": "",
      "description": "The z-index used for the component.",
      "description_zh": "用于组件的 z-index。",
      "required": false
    }
  },
  "link": "https://vuetifyjs.com/en/api/v-snackbar-queue/",
  "link_zh": "https://vuetifyjs.com/en/api/v-snackbar-queue/",
  "typeDetail": {},
  "events": [
    {
      "name": "update:modelValue",
      "description": "Event that is emitted when the component’s model changes.",
      "description_zh": "组件的模型更改时发出的事件。",
      "params": "[  (    | string    | {        text: string        multiLine: boolean        timer: string | boolean        timeout: string | number        vertical: boolean        location: Anchor        position: 'static' | 'relative' | 'fixed' | 'absolute' | 'sticky'        absolute: boolean        rounded: string | number | boolean        tile: boolean        color: string        variant: 'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'        theme: string        closeOnBack: boolean        contained: boolean        contentClass: any        contentProps: any        disabled: boolean        opacity: string | number        zIndex: string | number        target:          | Element          | 'parent'          | 'cursor'          | (string & {})          | ComponentPublicInstance          | [number, number]        closeOnContentClick: boolean        style: StyleValue        class: any        height: string | number        maxHeight: string | number        maxWidth: string | number        minHeight: string | number        minWidth: string | number        width: string | number        eager: boolean        locationStrategy: 'static' | 'connected' | LocationStrategyFn        origin: Anchor | 'auto' | 'overlap'        offset: string | number | number[]        transition:          | string          | boolean          | (TransitionProps & { component: Component })        attach: string | boolean | Element        'v-slots': {          activator:            | false            | ((arg: {                isActive: boolean                props: Record<string, any>              }) => VNodeChild)          default: false | (() => VNodeChild)          actions: false | ((arg: { isActive: Ref<boolean> }) => VNodeChild)          text: false | (() => VNodeChild)        }        'v-slot:default': false | (() => VNodeChild)        'v-slot:activator':          | false          | ((arg: {              isActive: boolean              props: Record<string, any>            }) => VNodeChild)        key: string | number | symbol        ref: VNodeRef        ref_for: boolean        ref_key: string        onVnodeBeforeMount: VNodeMountHook | VNodeMountHook[]        onVnodeMounted: VNodeMountHook | VNodeMountHook[]        onVnodeBeforeUpdate: VNodeUpdateHook | VNodeUpdateHook[]        onVnodeUpdated: VNodeUpdateHook | VNodeUpdateHook[]        onVnodeBeforeUnmount: VNodeMountHook | VNodeMountHook[]        onVnodeUnmounted: VNodeMountHook | VNodeMountHook[]        'v-slot:actions':          | false          | ((arg: { isActive: Ref<boolean> }) => VNodeChild)        'v-slot:text': false | (() => VNodeChild)      }  )[],]",
      "value": ""
    }
  ],
  "methods": [],
  "slots": [
    {
      "name": "actions",
      "description": "Used to bind styles to v-btn to match MD2 specification.",
      "description_zh": "用于将样式绑定到 v-btn 以匹配 MD2 规范。",
      "params": "{\n  item:\n    | string\n    | {\n        text: string\n        multiLine: boolean\n        timer: string | boolean\n        timeout: string | number\n        vertical: boolean\n        location: Anchor\n        position: 'static' | 'relative' | 'fixed' | 'absolute' | 'sticky'\n        absolute: boolean\n        rounded: string | number | boolean\n        tile: boolean\n        color: string\n        variant: 'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n        theme: string\n        closeOnBack: boolean\n        contained: boolean\n        contentClass: any\n        contentProps: any\n        disabled: boolean\n        opacity: string | number\n        zIndex: string | number\n        target:\n          | Element\n          | 'parent'\n          | 'cursor'\n          | (string & {})\n          | ComponentPublicInstance\n          | [number, number]\n        closeOnContentClick: boolean\n        style: StyleValue\n        class: any\n        height: string | number\n        maxHeight: string | number\n        maxWidth: string | number\n        minHeight: string | number\n        minWidth: string | number\n        width: string | number\n        eager: boolean\n        locationStrategy: 'static' | 'connected' | LocationStrategyFn\n        origin: Anchor | 'auto' | 'overlap'\n        offset: string | number | number[]\n        transition:\n          | string\n          | boolean\n          | (TransitionProps & { component: Component })\n        attach: string | boolean | Element\n        'v-slots': {\n          activator:\n            | false\n            | ((arg: {\n                isActive: boolean\n                props: Record<string, any>\n              }) => VNodeChild)\n          default: false | (() => VNodeChild)\n          actions: false | ((arg: { isActive: Ref<boolean> }) => VNodeChild)\n          text: false | (() => VNodeChild)\n        }\n        'v-slot:default': false | (() => VNodeChild)\n        'v-slot:activator':\n          | false\n          | ((arg: {\n              isActive: boolean\n              props: Record<string, any>\n            }) => VNodeChild)\n        key: string | number | symbol\n        ref: VNodeRef\n        ref_for: boolean\n        ref_key: string\n        onVnodeBeforeMount: VNodeMountHook | VNodeMountHook[]\n        onVnodeMounted: VNodeMountHook | VNodeMountHook[]\n        onVnodeBeforeUpdate: VNodeUpdateHook | VNodeUpdateHook[]\n        onVnodeUpdated: VNodeUpdateHook | VNodeUpdateHook[]\n        onVnodeBeforeUnmount: VNodeMountHook | VNodeMountHook[]\n        onVnodeUnmounted: VNodeMountHook | VNodeMountHook[]\n        'v-slot:actions':\n          | false\n          | ((arg: { isActive: Ref<boolean> }) => VNodeChild)\n        'v-slot:text': false | (() => VNodeChild)\n      }\n  props: { onClick: () => void }\n}"
    },
    {
      "name": "default",
      "description": "The default Vue slot.",
      "description_zh": "默认的 Vue 插槽。",
      "params": "{\n  item:\n    | string\n    | {\n        text: string\n        multiLine: boolean\n        timer: string | boolean\n        timeout: string | number\n        vertical: boolean\n        location: Anchor\n        position: 'static' | 'relative' | 'fixed' | 'absolute' | 'sticky'\n        absolute: boolean\n        rounded: string | number | boolean\n        tile: boolean\n        color: string\n        variant: 'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n        theme: string\n        closeOnBack: boolean\n        contained: boolean\n        contentClass: any\n        contentProps: any\n        disabled: boolean\n        opacity: string | number\n        zIndex: string | number\n        target:\n          | Element\n          | 'parent'\n          | 'cursor'\n          | (string & {})\n          | ComponentPublicInstance\n          | [number, number]\n        closeOnContentClick: boolean\n        style: StyleValue\n        class: any\n        height: string | number\n        maxHeight: string | number\n        maxWidth: string | number\n        minHeight: string | number\n        minWidth: string | number\n        width: string | number\n        eager: boolean\n        locationStrategy: 'static' | 'connected' | LocationStrategyFn\n        origin: Anchor | 'auto' | 'overlap'\n        offset: string | number | number[]\n        transition:\n          | string\n          | boolean\n          | (TransitionProps & { component: Component })\n        attach: string | boolean | Element\n        'v-slots': {\n          activator:\n            | false\n            | ((arg: {\n                isActive: boolean\n                props: Record<string, any>\n              }) => VNodeChild)\n          default: false | (() => VNodeChild)\n          actions: false | ((arg: { isActive: Ref<boolean> }) => VNodeChild)\n          text: false | (() => VNodeChild)\n        }\n        'v-slot:default': false | (() => VNodeChild)\n        'v-slot:activator':\n          | false\n          | ((arg: {\n              isActive: boolean\n              props: Record<string, any>\n            }) => VNodeChild)\n        key: string | number | symbol\n        ref: VNodeRef\n        ref_for: boolean\n        ref_key: string\n        onVnodeBeforeMount: VNodeMountHook | VNodeMountHook[]\n        onVnodeMounted: VNodeMountHook | VNodeMountHook[]\n        onVnodeBeforeUpdate: VNodeUpdateHook | VNodeUpdateHook[]\n        onVnodeUpdated: VNodeUpdateHook | VNodeUpdateHook[]\n        onVnodeBeforeUnmount: VNodeMountHook | VNodeMountHook[]\n        onVnodeUnmounted: VNodeMountHook | VNodeMountHook[]\n        'v-slot:actions':\n          | false\n          | ((arg: { isActive: Ref<boolean> }) => VNodeChild)\n        'v-slot:text': false | (() => VNodeChild)\n      }\n}"
    },
    {
      "name": "text",
      "description": "Slot for the component’s text content.",
      "description_zh": "组件文本内容的插槽。",
      "params": "{\n  item:\n    | string\n    | {\n        text: string\n        multiLine: boolean\n        timer: string | boolean\n        timeout: string | number\n        vertical: boolean\n        location: Anchor\n        position: 'static' | 'relative' | 'fixed' | 'absolute' | 'sticky'\n        absolute: boolean\n        rounded: string | number | boolean\n        tile: boolean\n        color: string\n        variant: 'text' | 'flat' | 'elevated' | 'tonal' | 'outlined' | 'plain'\n        theme: string\n        closeOnBack: boolean\n        contained: boolean\n        contentClass: any\n        contentProps: any\n        disabled: boolean\n        opacity: string | number\n        zIndex: string | number\n        target:\n          | Element\n          | 'parent'\n          | 'cursor'\n          | (string & {})\n          | ComponentPublicInstance\n          | [number, number]\n        closeOnContentClick: boolean\n        style: StyleValue\n        class: any\n        height: string | number\n        maxHeight: string | number\n        maxWidth: string | number\n        minHeight: string | number\n        minWidth: string | number\n        width: string | number\n        eager: boolean\n        locationStrategy: 'static' | 'connected' | LocationStrategyFn\n        origin: Anchor | 'auto' | 'overlap'\n        offset: string | number | number[]\n        transition:\n          | string\n          | boolean\n          | (TransitionProps & { component: Component })\n        attach: string | boolean | Element\n        'v-slots': {\n          activator:\n            | false\n            | ((arg: {\n                isActive: boolean\n                props: Record<string, any>\n              }) => VNodeChild)\n          default: false | (() => VNodeChild)\n          actions: false | ((arg: { isActive: Ref<boolean> }) => VNodeChild)\n          text: false | (() => VNodeChild)\n        }\n        'v-slot:default': false | (() => VNodeChild)\n        'v-slot:activator':\n          | false\n          | ((arg: {\n              isActive: boolean\n              props: Record<string, any>\n            }) => VNodeChild)\n        key: string | number | symbol\n        ref: VNodeRef\n        ref_for: boolean\n        ref_key: string\n        onVnodeBeforeMount: VNodeMountHook | VNodeMountHook[]\n        onVnodeMounted: VNodeMountHook | VNodeMountHook[]\n        onVnodeBeforeUpdate: VNodeUpdateHook | VNodeUpdateHook[]\n        onVnodeUpdated: VNodeUpdateHook | VNodeUpdateHook[]\n        onVnodeBeforeUnmount: VNodeMountHook | VNodeMountHook[]\n        onVnodeUnmounted: VNodeMountHook | VNodeMountHook[]\n        'v-slot:actions':\n          | false\n          | ((arg: { isActive: Ref<boolean> }) => VNodeChild)\n        'v-slot:text': false | (() => VNodeChild)\n      }\n}"
    }
  ],
  "exposed": []
}
