{
  "name": "VForm",
  "props": {
    "disabled": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Puts all children inputs into a disabled state.",
      "description_zh": "将所有子项输入置于禁用状态。",
      "required": false
    },
    "fast-fail": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Stop validation as soon as any rules fail.",
      "description_zh": "一旦任何规则失败，就立即停止验证。",
      "required": false
    },
    ":v-model": {
      "default": "null",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "The value representing the validity of the form. If the value is null then no validation has taken place yet, or the form has been reset. Otherwise the value will be a boolean that indicates if validation has passed or not.",
      "description_zh": "表示表单有效性的值。如果值为 null，则尚未进行验证，或者表单已重置。否则，该值将是一个布尔值，指示验证是否通过。",
      "required": true
    },
    "readonly": {
      "default": "false",
      "value": "",
      "type": "boolean",
      "version": "",
      "description": "Puts all children inputs into a readonly state.",
      "description_zh": "将所有子项输入置于只读状态。",
      "required": false
    },
    "validate-on": {
      "default": "'input'",
      "value": "",
      "type": " / blur / input / submit / invalid-input / blur lazy / input lazy / submit lazy / invalid-input lazy / blur eager / input eager / submit eager / invalid-input eager / lazy blur / lazy input / lazy submit / lazy invalid-input / eager blur / eager input / eager submit / eager invalid-input / lazy / eager",
      "version": "",
      "description": "Changes the events in which validation occurs.",
      "description_zh": "更改发生验证的事件。",
      "required": false
    }
  },
  "link": "https://vuetifyjs.com/en/api/v-form/",
  "link_zh": "https://vuetifyjs.com/en/api/v-form/",
  "typeDetail": {},
  "events": [
    {
      "name": "submit",
      "description": "Emitted when form is submitted.",
      "description_zh": "提交表单时发出。",
      "params": "[SubmitEventPromise]",
      "value": ""
    },
    {
      "name": "update:modelValue",
      "description": "Event emitted when the form’s validity changes.",
      "description_zh": "表单有效性更改时发出的事件。",
      "params": "[boolean]",
      "value": ""
    }
  ],
  "methods": [],
  "slots": [
    {
      "name": "default",
      "description": "The default Vue slot.",
      "description_zh": "默认的 Vue 插槽。",
      "params": "{\n  errors: Ref<{ id: string | number; errorMessages: string[] }[]>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isValidating: ShallowRef<boolean>\n  isValid: Ref<boolean | null> & { externalValue: boolean }\n  items: Ref<\n    {\n      id: string | number\n      validate: () => Promise<string[]>\n      reset: () => Promise<void>\n      resetValidation: () => Promise<void>\n      vm: Raw<ComponentInternalInstance>\n      isValid: boolean | null\n      errorMessages: string[]\n    }[]\n  >\n  validate: () => Promise<{\n    valid: boolean\n    errors: { id: string | number; errorMessages: string[] }[]\n  }>\n  reset: () => void\n  resetValidation: () => void\n}"
    }
  ],
  "exposed": [
    {
      "name": "errors",
      "description": "Contains all current form input errors.",
      "description_zh": "Contains all current form input errors.",
      "detail": "{ id: string | number; errorMessages: string[] }[]"
    },
    {
      "name": "isDisabled",
      "description": "Indicates if form is disabled or not.",
      "description_zh": "Indicates if form is disabled or not.",
      "detail": "boolean"
    },
    {
      "name": "isReadonly",
      "description": "Indicates if form is readonly or not.",
      "description_zh": "Indicates if form is readonly or not.",
      "detail": "boolean"
    },
    {
      "name": "isValid",
      "description": "MISSING DESCRIPTION (edit in github)",
      "description_zh": "MISSING DESCRIPTION (edit in github)",
      "detail": "boolean"
    },
    {
      "name": "isValidating",
      "description": "Indicates if form is currently being validated or not.",
      "description_zh": "Indicates if form is currently being validated or not.",
      "detail": "boolean"
    },
    {
      "name": "items",
      "description": "Array of all registered inputs.",
      "description_zh": "Array of all registered inputs.",
      "detail": "{\n  id: string | number\n  validate: () => Promise<string[]>\n  reset: () => Promise<void>\n  resetValidation: () => Promise<void>\n  vm: Raw<ComponentInternalInstance>\n  isValid: boolean | null\n  errorMessages: string[]\n}[]"
    },
    {
      "name": "reset",
      "description": "Resets validation of all registered inputs, and clears their values.",
      "description_zh": "Resets validation of all registered inputs, and clears their values.",
      "detail": "() => void"
    },
    {
      "name": "resetValidation",
      "description": "Resets validation of all registered inputs without modifying their values.",
      "description_zh": "Resets validation of all registered inputs without modifying their values.",
      "detail": "() => void"
    },
    {
      "name": "validate",
      "description": "Validates all registered inputs.",
      "description_zh": "Validates all registered inputs.",
      "detail": "() => Promise<{\n  valid: boolean\n  errors: { id: string | number; errorMessages: string[] }[]\n}>"
    }
  ]
}
